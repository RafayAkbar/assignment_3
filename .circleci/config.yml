version: 2.1

# Define executors
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0  # Linux-based .NET SDK
    working_directory: ~/repo

  docker-executor:
    docker:
      - image: docker:20.10.7  # For Docker commands
    working_directory: ~/repo

# Define jobs
jobs:
  checkout-and-build:
    executor: dotnet
    steps:
      - checkout  # Pull code from GitHub
      - run:
          name: Restore Dependencies
          command: dotnet restore
      - run:
          name: Build Project
          command: dotnet build --configuration Release
      - persist_to_workspace:  # Save for later jobs
          root: ~/repo
          paths:
            - .

  dependency-check:
    executor: dotnet
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install Dependency-Check
          command: |
            apt-get update && apt-get install -y curl unzip
            curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip -o dc.zip
            unzip dc.zip -d /usr/local/
            chmod +x /usr/local/dependency-check/bin/dependency-check.sh
      - run:
          name: Run Dependency-Check
          command: |
            /usr/local/dependency-check/bin/dependency-check.sh \
              --project "Assignment3" \
              --scan . \
              --format HTML \
              --format JSON \
              --out reports/dependency-check \
              --nvdApiKey "$NVD_API_KEY"
      - store_artifacts:
          path: reports/dependency-check
          destination: dependency-check-reports
      - persist_to_workspace:
          root: ~/repo
          paths:
            - reports

  sonar-analysis:
    executor: dotnet
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install SonarScanner
          command: dotnet tool install --global dotnet-sonarscanner
      - run:
          name: Run SonarQube Analysis
          command: |
            export PATH="$PATH:/root/.dotnet/tools"
            dotnet sonarscanner begin \
              /k:"assignment_3" \
              /d:sonar.host.url="$SONARQUBE_URL" \
              /d:sonar.login="$SONARQUBE_TOKEN"
            dotnet build --configuration Release
            dotnet sonarscanner end /d:sonar.login="$SONARQUBE_TOKEN"
      - store_artifacts:
          path: .sonarqube
          destination: sonar-reports

  unit-tests:
    executor: dotnet
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run Unit Tests
          command: dotnet test --logger "trx" --results-directory TestResults
      - store_test_results:
          path: TestResults
      - store_artifacts:
          path: TestResults
          destination: test-results

  build-and-push-docker:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build Docker Image
          command: docker build -t "$DOCKERHUB_USER/assignment3:latest" .
      - run:
          name: Push to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push "$DOCKERHUB_USER/assignment3:latest"

  notify:
    executor: dotnet
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Send Email Notification
          command: |
            curl -X POST "https://api.sendgrid.com/v3/mail/send" \
              -H "Authorization: Bearer $SENDGRID_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "personalizations": [{"to": [{"email": "athawerani@gmail.com"}]}],
                "from": {"email": "no-reply@circleci.com"},
                "subject": "Assignment 3 Build Report",
                "content": [
                  {"type": "text/plain", "value": "Build completed. Reports: https://circleci.com/gh/aathawerani/assignment_3/${CIRCLE_BUILD_NUM}"}
                ]
              }'

# Workflow
workflows:
  build-test-deploy:
    jobs:
      - checkout-and-build
      - dependency-check:
          requires:
            - checkout-and-build
      - sonar-analysis:
          requires:
            - checkout-and-build
      - unit-tests:
          requires:
            - checkout-and-build
      - build-and-push-docker:
          requires:
            - dependency-check
            - sonar-analysis
            - unit-tests
      - notify:
          requires:
            - dependency-check
            - sonar-analysis
            - unit-tests
stage('Create Pull Request to Deployment') {
    steps {
        script {
            failedStage = "Pull Request"  // Set stage name
            def GITHUB_TOKEN = credentials('github-token')  // GitHub Token stored in Jenkins credentials
            def GITHUB_USERNAME = "rafay60"  // Replace with your GitHub username
            def GITHUB_EMAIL = "k214766@nu.edu.pk"
            def REPO = "rafay60/assignment_3"  // Replace with your repo name
            def SOURCE_BRANCH = "main"
            def TARGET_BRANCH = "deployment"
            def prTitle = "Automated PR: Merge ${SOURCE_BRANCH} into ${TARGET_BRANCH}"
            def prBody = "This PR was automatically generated by Jenkins."

            // Set the correct Git user in Jenkins
            bat "git config --global user.name \"${GITHUB_USERNAME}\""
            bat "git config --global user.email \"${GITHUB_EMAIL}\""

            // Create a pull request using GitHub API
            withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                bat """
                    "D:\\DevOps\\curl\\bin\\curl.exe" -X POST \
                    -H "Authorization: token %GITHUB_TOKEN%" \
                    -H "Accept: application/vnd.github.v3+json" \
                    [invalid url, do not cite] \
                    -d "{\"title\": \"${prTitle}\", \"body\": \"${prBody}\", \"head\": \"${SOURCE_BRANCH}\", \"base\": \"${TARGET_BRANCH}\"}"
                """
            }
        }
    }
}
pipeline {
    agent any
    environment {
        SONARQUBE_URL = 'http://localhost:9000'
        SONARQUBE_TOKEN = credentials('sonarqube-token')  // Replace with your credential ID
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'rafay60/assignment_3'
        GITHUB_TOKEN = credentials('github-token')
        EMAIL_RECIPIENT = 'k214766@nu.edu.pk'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    failedStage = "Checkout"  // Set stage name
                }
                git branch: 'main', credentialsId: 'github-credentials', url: 'https://github.com/rafay60/assignment_3.git'
            }
        }
    }
}
